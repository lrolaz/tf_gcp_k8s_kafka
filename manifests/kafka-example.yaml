---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: cert-manager-vault-token
  namespace: kube-public
data:
  token: YmZkZjk0YmEtNzdmZi03MjEyLTU4NjMtNDc4OGU1OWM5NDYx    
---
apiVersion: certmanager.k8s.io/v1alpha1
kind: Issuer
metadata:
  name: vault-kafka-issuer
  namespace: kube-public
spec:
  vault:
    auth:
      tokenSecretRef:
        name: cert-manager-vault-token
        key: token
    path: PictetRoboCA1/sign/kube-kafka
    server: https://vault:8200
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kafka
  namespace: kube-public 
  labels:
    app: cp-kafka
    product: kub
    environment: labo   
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: kafka
  namespace: kube-public   
  labels:
    app: cp-kafka
    product: kub
    environment: labo  
rules:
  - apiGroups: ["certmanager.k8s.io"]
    resources: ["certificates"]
    verbs: ["*"]
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: kafka
  namespace: kube-public    
  labels:
    app: cp-kafka
    product: kub
    environment: labo  
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kafka
subjects:
  - name: kafka
    namespace: kube-public 
    kind: ServiceAccount
---
apiVersion: kafka.strimzi.io/v1alpha1
kind: KafkaTopic
metadata:
  name: example02
  namespace: kube-public
  labels:
    strimzi.io/kind: topic  
spec:
  partitions: 1
  replicas: 2
  config:
    compression.type: producer
    cleanup.policy: delete
    retention.ms: 604800000
    max.message.bytes: 1048576
    retention.bytes: -1
---
apiVersion: v1
kind: Pod
metadata:
  name: example-consumer
  namespace: kube-public
spec:
  serviceAccountName: kafka   
  initContainers:
  - name: certificate-init-container
    image: eu.gcr.io/kube-kafka-labo/certificate-init-container:0.0.25
    imagePullPolicy: Always
    env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace               
    args:
      - "-common-name=example-consumer.$(NAMESPACE).kafka.cluster.local"
      - "-issuer-name=vault-kafka-issuer"
      - "-issuer-kind=Issuer"          
      - "-secret-name=kafka-example-consumer-certificate"
      - "-namespace=$(NAMESPACE)"                          
      - "-keystore-dir=/etc/kafka/tls" 
      - "-ca-secret-name=ca"      
    volumeMounts:
      - name: kafka-keystore
        mountPath: /etc/kafka/tls         
  containers:
  - name: example-consumer
    image: strimzi/kafka:latest
    resources:
      limits:
        memory: "200Mi"
      requests:
        memory: "100Mi"
    command: 
    - sh
    - -exc
    - |
      exec bin/kafka-console-consumer.sh --bootstrap-server kafka-cp-kafka-headless.kube-kafka.svc.cluster.local:9093 \
      --topic example02 \
      --from-beginning \
      --group example-consumer01 \
      --consumer-property security.protocol=SSL \
      --consumer-property ssl.truststore.location=/etc/kafka/tls/truststore.jks \
      --consumer-property ssl.truststore.password=$(cat /etc/kafka/tls/truststore.password) \
      --consumer-property ssl.keystore.location=/etc/kafka/tls/kafka-example-consumer-certificate.jks \
      --consumer-property ssl.keystore.password=$(cat /etc/kafka/tls/kafka-example-consumer-certificate.password) \
      --consumer-property ssl.key.password=$(cat /etc/kafka/tls/kafka-example-consumer-certificate.password) 
    volumeMounts:
      - name: kafka-keystore
        mountPath: /etc/kafka/tls   
  volumes:
    - name: kafka-keystore
      emptyDir: {}

---
apiVersion: v1
kind: Pod
metadata:
  name: example-producer
  namespace: kube-public
spec:
  serviceAccountName: kafka   
  initContainers:
  - name: certificate-init-container
    image: eu.gcr.io/kube-kafka-labo/certificate-init-container:0.0.25
    imagePullPolicy: Always
    env:
      - name: NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace               
    args:
      - "-common-name=example-producer.$(NAMESPACE).kafka.cluster.local"
      - "-issuer-name=vault-kafka-issuer"
      - "-issuer-kind=Issuer"          
      - "-secret-name=kafka-example-producer-certificate"
      - "-namespace=$(NAMESPACE)"                          
      - "-keystore-dir=/etc/kafka/tls" 
      - "-ca-secret-name=ca"      
    volumeMounts:
      - name: kafka-keystore
        mountPath: /etc/kafka/tls   
  containers:
  - name: example-producer
    image: strimzi/kafka:latest
    resources:
      limits:
        memory: "200Mi"
      requests:
        memory: "100Mi"
    command: 
    - sh
    - -exc
    - |
      exec bin/kafka-producer-perf-test.sh \
      --topic example02 \
      --num-records 100000 --throughput 10 --record-size 10 \
      --producer-props bootstrap.servers=kafka-cp-kafka-headless.kube-kafka.svc.cluster.local:9093 \
      security.protocol=SSL \
      ssl.truststore.location=/etc/kafka/tls/truststore.jks \
      ssl.truststore.password=$(cat /etc/kafka/tls/truststore.password) \
      ssl.keystore.location=/etc/kafka/tls/kafka-example-producer-certificate.jks \
      ssl.keystore.password=$(cat /etc/kafka/tls/kafka-example-producer-certificate.password) \
      ssl.key.password=$(cat /etc/kafka/tls/kafka-example-producer-certificate.password)     
    volumeMounts:
      - name: kafka-keystore
        mountPath: /etc/kafka/tls   
  volumes:
    - name: kafka-keystore
      emptyDir: {}  
  restartPolicy: Never 
   